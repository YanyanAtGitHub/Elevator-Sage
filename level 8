{
    init: function(elevators, floors) {
        function getdirection(elevator){
            if(elevator.goingUpIndicator() == true){
                return "up"
            }
            else{
                return "down"
            }
        }
        
        function getup(){
            var upArray = new Array()

            for(var i = 0; i < floors.length - 1; i++){
                if(floors[i].on("up_button_pressed").buttonStates.up == "activated"){
                    upArray.push(i)
                }     
            }
            return upArray
        }

        function getdown(){
            var downArray = new Array()

            for(var i = 1; i < floors.length; i++){
                if(floors[i].on("down_button_pressed").buttonStates.down == "activated"){
                    downArray.push(i)
                }
            }

            return downArray
        }
        
        function destinationrefresh(){
            var totalqueue = new Array()
            var destination0 = elevators[0].destinationQueue;

            var destination1 = elevators[1].destinationQueue;

            totalqueue = totalqueue.concat(destination0.concat(destination1));
            
            totalqueue.push(elevators[0].currentFloor());
            totalqueue.push(elevators[1].currentFloor());

            var waitingqueue = getup().concat(getdown());
            console.log("waiting queue is" + waitingqueue)
            if(waitingqueue){
                for(i = 0;i < waitingqueue.length; i++){
                    if(totalqueue.indexOf(waitingqueue[i]) == -1){
                        if(elevators[0].loadFactor() < elevators[1].loadFactor()){
                            elevators[0].destinationQueue = elevators[0].destinationQueue.push(waitingqueue[i]);
                            elevators[0].checkDestinationQueue();                        
                        }
                        else{
                            destination1.push(waitingqueue[i]);
                            elevators[1].destinationQueue = destination1;
                            elevators[1].checkDestinationQueue();       
                        }
                    }

                }
            }
        }

        elevators[0].on("floor_button_pressed", function(floorNum) {
            elevators[0].goToFloor(floorNum)
        });

        elevators[1].on("floor_button_pressed", function(floorNum) {
            elevators[1].goToFloor(floorNum)
        });

        elevators[0].on("passing_floor", function(floorNum, direction) {
            var direct = getdirection(elevators[0]);
            var destinationqueue = elevators[0].destinationQueue;
            if(floors[floorNum].on(direct + "_button_pressed").buttonStates.direct == "activated"){
                destinationqueue = destinationqueue.unshift(floorNum)
                elevators[0].destinationQueue = destinationqueue
                elevators[0].checkDestinationQueue();
            }
            
                for(var i = 0; i < destinationqueue.length; i++){
                    if(destinationqueue[i] == floorNum){
                        destinationqueue.splice(i, 1);
                        destinationqueue = destinationqueue.unshift(floorNum)
                        elevators[0].destinationQueue = destinationqueue
                        elevators[0].checkDestinationQueue();                                                          
                    }
                }
            
        });

        elevators[1].on("passing_floor", function(floorNum, direction) {
            var direct = getdirection(elevators[1])
            var destinationqueue = elevators[1].destinationQueue;
            if(floors[floorNum].on(direct + "_button_pressed").buttonStates.direct == "activated"){
                destinationqueue = destinationqueue.unshift(floorNum)
                elevators[1].destinationQueue = destinationqueue
                elevators[1].checkDestinationQueue();
            }
            
            
            if(destinationqueue){
                for(var i = 0; i < destinationqueue.length; i++){
                    if(destinationqueue[i] == floorNum){
                        destinationqueue.splice(i, 1);
                        destinationqueue = destinationqueue.unshift(floorNum)
                        elevators[1].destinationQueue = destinationqueue
                        elevators[1].checkDestinationQueue();                                                          
                    }
                }
            }
            
        });
        
        elevators[0].on("stopped_at_floor", function(floorNum){
            destinationrefresh()
        });
        
        elevators[1].on("stopped_at_floor", function(floorNum){
            destinationrefresh()
        });


               

       
    },
    update: function(dt, elevators, floors) {
        // We normally don't need to do anything here
        console.log(elevators[0].destinationQueue)



    }
}
